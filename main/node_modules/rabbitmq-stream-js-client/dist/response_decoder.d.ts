import { Compression, CompressionType } from "./compression";
import { DecoderListenerFunc } from "./decoder_listener";
import { Logger } from "./logger";
import { CreditResponse } from "./responses/credit_response";
import { DeliverResponse } from "./responses/deliver_response";
import { MetadataUpdateResponse } from "./responses/metadata_update_response";
import { PublishConfirmResponse } from "./responses/publish_confirm_response";
import { PublishErrorResponse } from "./responses/publish_error_response";
import { DataReader } from "./responses/raw_response";
import { ConsumerUpdateQuery } from "./responses/consumer_update_query";
import { DeliverResponseV2 } from "./responses/deliver_response_v2";
export type MetadataUpdateListener = (metadata: MetadataUpdateResponse) => void;
export type CreditListener = (creditResponse: CreditResponse) => void;
export type DeliverListener = (response: DeliverResponse) => void;
export type DeliverV2Listener = (response: DeliverResponseV2) => void;
export type PublishConfirmListener = (confirm: PublishConfirmResponse) => void;
export type PublishErrorListener = (confirm: PublishErrorResponse) => void;
export type ConsumerUpdateQueryListener = (metadata: ConsumerUpdateQuery) => void;
export declare function readUTF8String(dataResponse: DataReader): string;
export declare function decodeBooleanType(dataResponse: DataReader, defaultValue: boolean): boolean;
export declare function decodeFormatCode(dataResponse: DataReader, formatCode: number, skipByte?: boolean): string | number | bigint | boolean;
export declare class BufferDataReader implements DataReader {
    private data;
    private offset;
    constructor(data: Buffer);
    readTo(size: number): DataReader;
    readBufferOf(size: number): Buffer;
    readToEnd(): DataReader;
    readInt8(): number;
    readInt64(): bigint;
    readUInt8(): number;
    readUInt16(): number;
    readUInt32(): number;
    readUInt64(): bigint;
    readDouble(): number;
    readFloat(): number;
    readInt32(): number;
    readString(): string;
    readString8(): string;
    readString32(): string;
    rewind(count: number): void;
    forward(count: number): void;
    position(): number;
    isAtEnd(): boolean;
    available(): number;
}
export declare class ResponseDecoder {
    private listener;
    private logger;
    private responseFactories;
    private emitter;
    private lastData;
    constructor(listener: DecoderListenerFunc, logger: Logger);
    add(data: Buffer, getCompressionBy: (type: CompressionType) => Compression): void;
    on(event: "consumer_update_query", listener: ConsumerUpdateQueryListener): void;
    on(event: "metadata_update", listener: MetadataUpdateListener): void;
    on(event: "credit_response", listener: CreditListener): void;
    on(event: "publish_confirm", listener: PublishConfirmListener): void;
    on(event: "publish_error", listener: PublishErrorListener): void;
    on(event: "deliverV1", listener: DeliverListener): void;
    on(event: "deliverV2", listener: DeliverV2Listener): void;
    private addFactoryFor;
    private emitTuneResponseReceived;
    private emitResponseReceived;
    private getFactoryFor;
}
